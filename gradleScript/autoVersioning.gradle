// Version code is calculated as the number of commits from last commit on master

def getVersionCode = { ->
    try {
        def code = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', 'HEAD', '--count'
            standardOutput = code
        }
        return Integer.parseInt(code.toString().trim())
    } catch (exception) {
        return "1"
    }
}

// Version name is Last Tag Name + No. of commits form last Tag +  short git sha
def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--dirty'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (exception) {
        return "0.0.0.1"
    }
}

// Get the last Git Short Hash
def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}
//    def GIT_SHA = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()

//    def gitCommitCount = "git rev-list HEAD --count".execute().text.trim()

//https://stackoverflow.com/questions/21414399/android-gradle-dynamically-change-versionname-at-build-time
//ext {
//    versionFile = new File(project.rootDir, 'version.properties')
//    calculateVersionName = {
//        def version = readVersion()
//        return "${version['major']}.${version['minor']}.${version['build']}"
//    }
//    calculateVersionCode = {
//        def version = readVersion()
//        def major = version['major'] as int // 1..âˆž
//        def minor = version['minor'] as int // 0..99
//        def build = version['build'] as int // 0..999
//        return (major * 100 + minor) * 1000 + build
//    }
//}
//
//
//Properties readVersion() {
//    def version = new Properties()
//    def stream
//    try {
//        stream = new FileInputStream(versionFile)
//        version.load(stream)
//    } catch (FileNotFoundException ignore) {
//    } finally {
//        if (stream != null) stream.close()
//    }
//    // safety defaults in case file is missing
//    if(!version['major']) version['major'] = "1"
//    if(!version['minor']) version['minor'] = "0"
//    if(!version['build']) version['build'] = "0"
//    return version
//}
//
//void incrementVersionNumber() {
//    def version = readVersion()
//
//    // careful with the types, culprits: "9"++ = ":", "9" + 1 = "91"
//    def build = version['build'] as int
//    build++
//    version['build'] = build.toString()
//
//    def stream = new FileOutputStream(versionFile)
//    try {
//        version.store(stream, null)
//    } finally {
//        stream.close()
//    }
//}
//
//task incrementVersion {
//    description "Increments build counter in ${versionFile}"
//    doFirst {
//        incrementVersionNumber()
//    }
//}
//
//if (plugins.hasPlugin('android') || plugins.hasPlugin('android-library')) {
//    android {
//        defaultConfig {
//            versionName = calculateVersionName()
//            versionCode = calculateVersionCode()
//        }
//
//        afterEvaluate {
//            def autoIncrementVariant = { variant ->
//                if (variant.buildType.name == buildTypes.release.name) { // don't increment on debug builds
//                    variant.preBuild.dependsOn incrementVersion
//                    incrementVersion.doLast {
//                        variant.mergedFlavor.versionName = calculateVersionName()
//                        variant.mergedFlavor.versionCode = calculateVersionCode()
//                    }
//                }
//            }
//            if (plugins.hasPlugin('android')) {
//                applicationVariants.all { variant -> autoIncrementVariant(variant) }
//            }
//            if (plugins.hasPlugin('android-library')) {
//                libraryVariants.all { variant -> autoIncrementVariant(variant) }
//            }
//        }
//    }
//}