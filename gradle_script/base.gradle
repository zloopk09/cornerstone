def androidConfigure = {
    if (getName() == "app") {
        apply plugin: 'com.android.application'
        apply from: '../signingHelper.gradle'
    } else {
        apply plugin: 'com.android.library'
    }
    android {
        compileSdkVersion rootProject.ext.compileSdkVersion
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
        defaultConfig {
            minSdkVersion rootProject.ext.minSdkVersion
            targetSdkVersion rootProject.ext.targetSdkVersion
            versionCode 1
            versionName "1.0"
            multiDexEnabled true
            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        }

        buildTypes {

            debug {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                testProguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguardTest-rules.pro'
            }

            release.with {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                testProguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguardTest-rules.pro'
            }

            pre {
                initWith release
                debuggable true
            }
        }

        packagingOptions {
            exclude 'META-INF/NOTICE.txt'
            exclude 'LICENSE.txt'
            exclude 'META-INF/DEPENDENCIES'
            exclude 'META-INF/ASL2.0'
            exclude 'META-INF/NOTICE'
            exclude 'META-INF/LICENSE'
            exclude 'META-INF/MANIFEST.MF'
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/rxjava.properties'
            exclude 'META-INF/services/javax.annotation.processing.Processor'
        }

        lintOptions {
            abortOnError true
            xmlReport false
            htmlReport true
            lintConfig file("${project.rootDir}/gradle_script/lint.xml")
            xmlOutput file("$project.rootDir/reports/lint/" + project.getName() + "_lint.xml")
            htmlOutput file("$project.rootDir/reports/lint/" + project.getName() + "_lint.html")
        }
    }
}

def javaConfigure = {

}

if (getName().contains("java")) {
    javaConfigure
} else {
    androidConfigure()
}
