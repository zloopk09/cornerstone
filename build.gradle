// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: "$rootProject.projectDir/gradleScript/dependencies.gradle"
apply plugin: "com.github.ben-manes.versions"

buildscript {
    ext.kotlin_version = '1.2.61'
    ext.gradle_version = '3.2.1'
    ext.gradle_versions_plugin = '0.20.0'

    repositories {
//        google()
//        jcenter()
        maven { url 'http://maven.aliyun.com/nexus/content/repositories/google' }
        maven { url 'http://maven.aliyun.com/nexus/content/repositories/jcenter' }
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$gradle_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
        classpath "com.github.ben-manes:gradle-versions-plugin:$gradle_versions_plugin"
    }
}

allprojects {
    repositories {
//        google()
//        jcenter()
        maven { url 'http://maven.aliyun.com/nexus/content/repositories/google' }
        maven { url 'http://maven.aliyun.com/nexus/content/repositories/jcenter' }
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }

//        maven {
//            url "http://nexus.zloop.com/repository/release/"
//            credentials {
//                username 'zloop'
//                password 'zloop'
//            }
//        }

    }
}

subprojects {
//    apply from: "$rootProject.projectDir/healthCheck/checkStyle.gradle"
//    apply from: "$rootProject.projectDir/healthCheck/findbugs.gradle"
//    apply from: "$rootProject.projectDir/gradleScript/base.gradle"

}

//default output directory : build/dependencyUpdates/report.txt
dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

//configure(allprojects.findAll { it.name.contains('java') }) {
//    apply plugin: 'java-library'
//
//    dependencies {
//        implementation fileTree(dir: 'libs', include: ['*.jar'])
//    }
//
//    sourceCompatibility = "7"
//    targetCompatibility = "7"
//}

//project(':app') {
//    android {
//        signingConfigs {
//            release
//        }
//    }
//}