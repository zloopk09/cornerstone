apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply from: '../signingHelper.gradle'


// Version code is calculated as the number of commits from last commit on master
def getVersionCode = { ->
    try {
        def code = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', 'HEAD', '--count'
            standardOutput = code
        }
        return Integer.parseInt(code.toString().trim())
    } catch (exception) {
        return "1"
    }
}

// Version name is Last Tag Name + No. of commits form last Tag +  short git sha
def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--dirty'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (exception) {
        return "0.0.0.1"
    }
}

// Get the date of build
def getDateOfBuild = { -> // ISO 8601 time format
    return new Date().format("yyyy-MM-dd'T'HH:mm'Z'").toString().trim()
}

// Get the last Git Short Hash
def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "top.zloop.mobile.cornerstone"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode getVersionCode()
        versionName getVersionName()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        buildConfigField "String", "DATE_OF_BUILD", "\"${getDateOfBuild()}\""
        buildConfigField "String", "GIT_SHA", "\"${getGitHash()}\""
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // https://developer.android.com/studio/build/build-variants#product-flavorshttps://developer.android.com/studio/build/build-variants.html#product-flavors
    // https://gist.github.com/gabrielemariotti/6856974
    // another way to keep sign file safe
    // https://stackoverflow.com/questions/18328730/how-to-create-a-release-signed-apk-file-using-gradle/21020469#21020469
    signingConfigs {
        release
    }
//    def GIT_SHA = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()


    flavorDimensions "profit", "marketing"

    // If you need to add more flavors, consider using flavor dimensions.
    productFlavors {
        lite {
            dimension "profit"
            applicationIdSuffix ".lite"
            buildConfigField 'boolean', 'PAID', 'false'
            buildConfigField 'boolean', 'ADS_FEATURE_ENABLED', 'true'
        }
        pro {
            dimension "profit"
            applicationIdSuffix ".pro"
            buildConfigField 'boolean', 'PAID', 'true'
            buildConfigField 'boolean', 'ADS_FEATURE_ENABLED', 'false'
        }
        mini{
            dimension "marketing"
            versionCode 3
            minSdkVersion 23
        }
        full{
            dimension "marketing"
        }
        xiaomi{
//            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "xiaomi"]
            dimension "marketing"
        }
    }

//    sourceSets {
//        main {
//            jniLibs.srcDir 'src/main/libs'
//        }
//        free {
//            manifest.srcFile 'src/free/AndroidManifest.xml'
//            java.srcDirs = ['src/free/java',]
//            resources.srcDirs = ['src/free/resources', ]
//        }
//    }

    buildTypes {

        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix "-debug"
            //启用Android插件的压缩 但是不做代码混淆 ref:https://developer.android.com/studio/build/shrink-code?hl=zh-cn
            minifyEnabled true
            useProguard false
            shrinkResources true
            zipAlignEnabled true
            buildConfigField "boolean", "IS_DEBUG", "true"
            ext.enableCrashlytics = false
//            resConfigs "zh", "xxhdpi"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
        }

        release {
            versionNameSuffix "-release"
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            buildConfigField "boolean", "IS_DEBUG", "false"
//            project.archivesBaseName = APK_NAME+"-"+VERSION_NAME + "-"+buildDate;
            signingConfig signingConfigs.release
//            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguardTest-rules.pro'
        }

        staging {
            initWith release
            debuggable true
            versionNameSuffix "-pre"
            matchingFallbacks = ['release', 'debug']
        }
    }

//    applicationVariants.all { variant ->
//        def flavor = variant.mergedFlavor
//        def name = flavor.getVersionName()
//        def versionName = name + '-' + variant.properties.get('flavorName')
//        if (variant.buildType.isDebuggable()) {
//            versionName += '-debug';
//        }
//    if (flavor.name.equals('xiaomi')){
//        variant.setIgnore(true);
//    }
//        flavor.versionName = versionName;
//    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            if (variant.buildType.isDebuggable()) {
                output.versionNameOverride = "-debug"
            }
            if (variant.buildType.name.contains('release') ){
                variant.assemble.doLast {
                    deployApks
                }
            }
        }
    }

    packagingOptions {
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/MANIFEST.MF'
    }

    lintOptions {
        abortOnError false
        xmlReport false
        htmlReport true
        lintConfig file("${project.rootDir}/gradle_script/lint.xml")
        xmlOutput file("$project.rootDir/reports/lint/" + project.getName() + "_lint.xml")
        htmlOutput file("$project.rootDir/reports/lint/" + project.getName() + "_lint.html")
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "com.android.support:support-v4:$rootProject.supportLibraryVersion"
    implementation "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:cardview-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:recyclerview-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:design:$rootProject.supportLibraryVersion"
    implementation "com.android.support:support-annotations:$rootProject.supportLibraryVersion"

    implementation project(':biz_home')
    implementation project(':biz_article')
    implementation project(':biz_message')
    implementation project(':biz_search')
    implementation project(':biz_user')
//    freeCompile 'com.google.firebase:firebase-ads:10.2.1'

    implementation "com.android.support.constraint:constraint-layout:$rootProject.constraintLayoutVersion"
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
    implementation 'com.android.support:design:28.0.0-alpha1'
    implementation 'com.android.support:support-vector-drawable:28.0.0-alpha1'
    testImplementation "junit:junit:$rootProject.junitVersion"
    androidTestImplementation "com.android.support.test:runner:$rootProject.runnerVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$rootProject.espressoVersion"

}

task deployApks(type:Copy) {
    description = "Copies APKs and Proguard mappings to the deploy directory"
    def appName = "<app_name>";
    def versionDir = android.defaultConfig.versionName+"_"+android.defaultConfig.versionCode;

    println("Copies APK and Proguard to " + versionDir)

    from 'build/outputs/mapping/release/'
    include '**/mapping.txt'
    into '../.admin/deploy/' + versionDir
    rename ('mapping.txt', "${versionDir}-mapping.txt")

    from ('.') {
        exclude '**/build', '**/src'
    }

    include '*.apk'
    into '../.admin/deploy/' + versionDir
    rename ('app-release.apk', "${appName}-${versionDir}.apk")
}