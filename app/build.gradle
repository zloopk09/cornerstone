apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply from: '../signingHelper.gradle'
apply from: '../gradleScript/releaseHelper.gradle'
apply from: '../gradleScript/autoVersioning.gradle'

// versioning
def versionPropertiesFile = rootProject.file("./versioning.properties")
def versionProperties = new Properties()
versionProperties.load(new FileInputStream(versionPropertiesFile))

// ref: http://google.github.io/android-gradle-dsl/current/
android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "top.zloop.mobile.cornerstone"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        // 改为动态在buildType和flavor里面重新设置
        versionCode versionProperties['versionCode'] as int // Google Play 允许的最大 versionCode 值为 2100000000
        versionName versionProperties['versionName'] // <major>.<minor>.<point>(-<label>)
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        // buildConfigField "String", "GIT_SHA", "\"${getGitHash()}\""
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix "-DEBUG"
            //启用Android插件的压缩 但是不做代码混淆 ref:https://developer.android.com/studio/build/shrink-code?hl=zh-cn
            minifyEnabled true
            useProguard false
            shrinkResources true
            zipAlignEnabled true
            buildConfigField "boolean", "IS_DEBUG", "true"
            buildConfigField("String", "BUILD_TIME", "\"0000\"")
            //resValue("string", "build_time", "0")
            ext.enableCrashlytics = false
            ext.alwaysUpdateBuildId = false
//            resConfigs "zh", "xxhdpi"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
        }
        release {
            versionNameSuffix "-release"
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            buildConfigField "boolean", "IS_DEBUG", "false"
            buildConfigField "String", "DATE_OF_BUILD", "\"${getDateOfBuild}\""
            ext.enableCrashlytics = true
            ext.alwaysUpdateBuildId = true
//            project.archivesBaseName = APK_NAME+"-"+VERSION_NAME + "-"+buildDate;
            signingConfig signingConfigs.release
//            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguardTest-rules.pro'
        }
        pre {
            initWith release
            debuggable true
            versionNameSuffix "-pre"
            matchingFallbacks = ['release', 'debug']
        }
//        quick {
//            initWith debug
//            resConfigs("en", "xxhdpi")
//        }
    }

    flavorDimensions "feature", "market" //, "api", "country", "brand", "environment"

    // If you need to add more flavors, consider using flavor dimensions.
    // 配置内容打包时会覆盖 覆盖关系依次是：buildType{}优先于Flavor{}优先于defaultConfig{}
    productFlavors {
        free {
            dimension "feature"
            applicationIdSuffix ".free"
//            packageName = android.defaultConfig.packageName + ".paid"
            buildConfigField 'boolean', 'ADS_FEATURE_ENABLED', 'true'
//            manifestPlaceholders = [label: "free", icon: "@drawable/icon_debug"]
//            missingDimensionStrategy 'pro', 'mini'
        }
        pro {
            dimension "feature"
            applicationIdSuffix ".pro"
            buildConfigField 'boolean', 'ADS_FEATURE_ENABLED', 'false'
//            manifestPlaceholders = [label: "@string/app_name", icon: "@drawable/ic_launcher"]
            proguardFile 'pro-feature-rules.pro'
        }
        dev {
            dimension "market"
            // To avoid using legacy multidex when building from the command line,
            // set minSdkVersion to 21 or higher. When using Android Studio 2.3 or higher,
            // the build automatically avoids legacy multidex when deploying to a device running
            // API level 21 or higher—regardless of what you set as your minSdkVersion.
            minSdkVersion 21
            versionNameSuffix "-dev"
            applicationIdSuffix '.dev'
            // The following configuration limits the "dev" flavor to using
            // English stringresources and xxhdpi screen-density resources.
            resConfigs "en", "xxhdpi"
        }
        mini {
            dimension "market"
            versionCode 30000 + android.defaultConfig.versionCode
            versionNameSuffix "-mini"
            minSdkVersion 23
        }
        full {
            dimension "market"
        }
        xiaomi {
//            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "xiaomi"]
            dimension "market"
        }
    }

    sourceSets {
        // src/freeDebug/ > src/debug/ > src/free/ > src/main/
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java.srcDirs = ['src/main/java']
            res.srcDirs = ['src/main/res']
            assets.srcDirs = ['src/main/assets']
            jniLibs.srcDir 'src/main/libs'
        }
        free {
            manifest.srcFile 'src/free/AndroidManifest.xml'
            java.srcDirs = ['src/free/java']
            res.srcDirs = ['src/free/res']
            assets.srcDirs = ['src/free/assets']
            jniLibs.srcDir 'src/free/libs'
        }
        pro {
            manifest.srcFile 'src/pro/AndroidManifest.xml'
            java.srcDirs = ['src/pro/java']
            res.srcDirs = ['src/pro/res']
            assets.srcDirs = ['src/pro/assets']
            jniLibs.srcDir 'src/pro/libs'
        }
    }

    // 移除渠道marketing下面的debug和staging包
    variantFilter { variant ->
        def flavorNames = variant.flavors*.name
        def buildTypeName = variant.buildType.name
        if (!flavorNames.contains("dev")) {
            if (!buildTypeName.equals("release")) {
                setIgnore(true)
            }
        }
    }

    //application下是applicationVariants
    //library下是libraryVariants
    //同时共有testVariants
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
//            freeMarketDebug-版本号-版本名称-编译时间.apk
//            if (variant.buildType.name.contains('release')) {
//                variant.mergedFlavor.versionCode = getVersionCode
//                variant.mergedFlavor.versionName = getVersionName + "-" + variant.flavorName
                output.outputFileName ="${rootProject.name}_${variant.flavorName}_${variant.buildType.name}.apk"
//            }

            variant.assemble.doFirst {
                println "### assemble.doFirst"
            }

            variant.assemble.doLast {
                println "### assemble.doLast"
//                deployApks
//                exec {
//                    ignoreExitValue true
//                    def fileName = "FireMaster_${variant.buildType.name}_${android.defaultConfig.versionCode}.apk"
//                    commandLine "sh", "chmod +x ./script/uploadApk.sh"
//                    commandLine "sh", "./script/uploadApk.sh", fileName, variant.buildType.name, VERSION_NAME
//                }
            }

            variant.javaCompile.doLast {
                println "### javaCompile.doLast"
            }

            variant.mergeResources.doLast {
                println "### mergeResources.doLast"
            }

            variant.mergeAssets.doLast {
                println "### mergeAssets.doLast"
            }
        }
    }


//    splits {
//        // Configures multiple APKs based on ABI.
//        abi {
//            // Enables building multiple APKs.
//            enable true
//            // By default all ABIs are included, so use reset() and include to specify that we only
//            // want APKs for x86, armeabi-v7a, and mips.
//            reset()
//            // Specifies a list of ABIs that Gradle should create APKs for.
//            include "x86", "armeabi-v7a", "mips"
//            // Specify that we want to also generate a universal APK that includes all ABIs.
//            universalApk true
//        }
//    }

    dexOptions {
        // The maximum number of concurrent processes that can be used to dex.
        // default is 4 and Total Memory = maxProcessCount * javaMaxHeapSize
        //maxProcessCount 2
        // Number of threads to use when running dx. Defaults to 4.
        // threadCount 8
        // Specifies the -Xmx value when calling dx. Example value is "2048m".
        // ref: https://www.youtube.com/watch?v=7ll-rkLCtyk&feature=youtu.be&t=18m50s
        //javaMaxHeapSize "4g"
        // Whether to pre-dex libraries. This can improve incremental builds, but clean builds may be slower.
        preDexLibraries true
        // https://stackoverflow.com/questions/32067223/what-is-the-purpose-of-jumbomode-in-dexoptions-for-a-gradle-build/43616582
        // https://developers.soundcloud.com/blog/congratulations-you-have-a-lot-of-code-remedying-androids-method-limit-part-1
        jumboMode = true
    }

    packagingOptions {
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/MANIFEST.MF'
    }

    lintOptions {
        abortOnError false
        // ignoreWarnings true
        xmlReport false
        htmlReport true
        lintConfig file("${project.rootDir}/healthCheck/lint.xml")
        xmlOutput file("$project.rootDir/reports/lint/" + project.getName() + "_lint.xml")
        htmlOutput file("$project.rootDir/reports/lint/" + project.getName() + "_lint.html")
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
//    compile fileTree(dir: 'src/main/libs', include: '*.jar')
//    freeCompile fileTree(dir: 'src/free/libs', include: '*.jar')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "com.android.support:support-v4:$rootProject.supportLibraryVersion"
    implementation "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:cardview-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:recyclerview-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:design:$rootProject.supportLibraryVersion"
    implementation "com.android.support:support-annotations:$rootProject.supportLibraryVersion"

    implementation 'com.android.support:multidex:1.0.3'
    implementation project(':biz_home')
    implementation project(':biz_article')
    implementation project(':biz_message')
    implementation project(':biz_search')
    implementation project(':biz_user')
//    freeCompile 'com.google.firebase:firebase-ads:10.2.1'

    implementation "com.android.support.constraint:constraint-layout:$rootProject.constraintLayoutVersion"
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
    implementation 'com.android.support:design:28.0.0-alpha1'
    implementation 'com.android.support:support-vector-drawable:28.0.0-alpha1'
    testImplementation "junit:junit:$rootProject.junitVersion"
    androidTestImplementation "com.android.support.test:runner:$rootProject.runnerVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$rootProject.espressoVersion"

}